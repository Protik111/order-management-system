// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String
  role      Role     @default(user)
  gender    String
  password  String
  createdAt DateTime @default(now())

  @@map("users")
}

model Product {
  id                String             @id @default(uuid())
  name              String
  description       String
  price             Float
  weight            Float
  isEnabled         Boolean            @default(true) // To enable/disable the product
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  orderProducts     OrderProduct[] // Relation to OrderProduct (to track products in orders)
  promotionProducts PromotionProduct[] // Relation to PromotionProduct for applied promotions

  @@map("products")
}

model Promotion {
  id                String             @id @default(uuid())
  title             String
  type              PromotionType // Type of the promotion: percentage, fixed, weighted
  discount          Float? // For percentage or fixed types (null for weighted)
  slabs             PromotionSlab[] // Relationship to PromotionSlab (for weighted promotions)
  startDate         DateTime
  endDate           DateTime
  isEnabled         Boolean            @default(true) // To enable/disable promotion
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  promotionProducts PromotionProduct[] // Relation to PromotionProduct

  @@map("promotions")
}

model PromotionSlab {
  id          String    @id @default(uuid())
  promotionId String
  minWeight   Float
  maxWeight   Float
  discount    Float
  promotion   Promotion @relation(fields: [promotionId], references: [id])

  @@map("promotionSlabs")
}

model PromotionProduct {
  id          String    @id @default(uuid())
  promotionId String
  productId   String
  promotion   Promotion @relation(fields: [promotionId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])

  @@map("promotionProducts")
}

model Order {
  id            String         @id @default(uuid())
  customerName  String
  customerEmail String
  total         Float
  subTotal      Float
  discount      Float
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  products      OrderProduct[] // Relation to OrderProduct (list of products in this order)

  @@map("orders")
}

model OrderProduct {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  discount  Float
  weight    Float
  subTotal  Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("orderProducts")
}

enum Role {
  user
  admin
  moderator
}

enum PromotionType {
  percentage
  fixed
  weighted
}
